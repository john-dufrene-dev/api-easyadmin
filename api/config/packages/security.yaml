security:
    encoders:
        App\Entity\Security\Admin:
            algorithm: auto
        App\Entity\Customer\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        admin_user:
            entity:
                class: App\Entity\Security\Admin
                property: email
        customer_user:
            entity:
                class: App\Entity\Customer\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        customer:
            pattern: ^/(api(?!/docs|/index))
            stateless: true
            anonymous: true
            lazy: true
            provider: customer_user
            json_login:
                check_path: /api/auth/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        admin:
            anonymous: true
            lazy: true
            provider: admin_user
            guard:
                authenticators:
                    - App\Security\Admin\AdminAuthenticator
            logout:
                path: admin_logout
                target: admin_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user:
                provider: admin_user
                role: ROLE_ALLOWED_TO_SWITCH

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_API_DOCUMENTATION]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/auth/*, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/(docs|index).*, roles: ROLE_API_DOCUMENTATION }
        - { path: ^/api, roles: ROLE__USER }

    access_decision_manager:
        strategy: unanimous
